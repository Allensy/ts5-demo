/* eslint-disable @typescript-eslint/no-var-requires */

const {
    configs: { recommended: eslintConfigRecommended },
} = require('@eslint/js')

const eslintConfigPrettier = require('eslint-config-prettier')
const eslintPluginNode = require('eslint-plugin-node')
const eslintPluginPrettier = require('eslint-plugin-prettier')
const eslintPluginSecurity = require('eslint-plugin-security')

const typescriptEslintPlugin = require('@typescript-eslint/eslint-plugin')
const typescriptEslintParser = require('@typescript-eslint/parser')

const { FlatCompat } = require('@eslint/eslintrc')
const compat = new FlatCompat({
    baseDirectory: __dirname,
    resolvePluginsRelativeTo: __dirname,
    recommendedConfig: {},
})

module.exports = [
    eslintConfigRecommended,
    ...compat.extends('standard'),
    eslintConfigPrettier,
    {
        languageOptions: {
            ecmaVersion: 'latest',
            sourceType: 'module',
            parser: typescriptEslintParser,
            parserOptions: {
                warnOnUnsupportedTypeScriptVersion: false,
                project: 'tsconfig.json',
                ecmaVersion: 'latest',
                sourceType: 'module',
            },
        },
        plugins: {
            node: eslintPluginNode,
            prettier: eslintPluginPrettier,
            security: eslintPluginSecurity,
            '@typescript-eslint': typescriptEslintPlugin,
            typescriptEslintPlugin,
        },
        ignores: ['node_modules'],
        settings: {
            'import/resolver': {
                typescript: {
                    alwaysTryTypes: true,
                    project: 'tsconfig.json',
                },
            },
            'import/parsers': {
                espree: ['.js', '.cjs', '.mjs'],
                '@typescript-eslint/parser': ['.ts', '.cts', '.mts'],
            },
        },
        rules: {
            'comma-dangle': ['error', 'always-multiline'],

            // eslint-plugin-node rules
            'no-process-exit': 'error',
            'node/no-deprecated-api': 'error',
            'node/no-extraneous-import': 'error',
            'node/no-extraneous-require': 'error',
            'node/no-exports-assign': 'error',
            'node/no-missing-import': 'off', // Override
            'node/no-unpublished-bin': 'error',
            'node/no-unpublished-import': 'off', // Override.
            'node/no-unpublished-require': 'error',
            'node/no-unsupported-features/es-builtins': 'error',
            'node/no-unsupported-features/es-syntax': [
                'error',
                { ignores: ['modules'] },
            ],
            'node/no-unsupported-features/node-builtins': 'error',
            'node/process-exit-as-throw': 'error',
            'node/shebang': 'error',

            // eslint-plugin-import does not support flat config so the rules are here
            'import/no-unresolved': 'error',
            'import/named': 'error',
            'import/namespace': 'error',
            'import/default': 'error',
            'import/export': 'error',

            // red flags (thus, warnings)
            'import/no-named-as-default': 'warn',
            'import/no-named-as-default-member': 'warn',
            'import/no-duplicates': 'warn',

            // eslint-plugin-prettier does not support flat config so the rules are here
            'prettier/prettier': 'error',
            'arrow-body-style': 'off',
            'prefer-arrow-callback': 'off',

            // eslint-plugin-security config does not support eslint flat config so the rules are here
            'security/detect-buffer-noassert': 'warn',
            'security/detect-child-process': 'warn',
            'security/detect-disable-mustache-escape': 'warn',
            'security/detect-eval-with-expression': 'warn',
            'security/detect-new-buffer': 'warn',
            'security/detect-no-csrf-before-method-override': 'warn',
            'security/detect-non-literal-fs-filename': 'warn',
            'security/detect-non-literal-regexp': 'warn',
            'security/detect-non-literal-require': 'warn',
            'security/detect-object-injection': 'off', // Paranoid rule with lots of false positives (disabling it)
            'security/detect-possible-timing-attacks': 'warn',
            'security/detect-pseudoRandomBytes': 'warn',
            'security/detect-unsafe-regex': 'warn',
            'security/detect-bidi-characters': 'warn',

            // @typescript-eslint/plugin recommended rules
            ...typescriptEslintPlugin.configs.recommended.rules,

            'node/no-missing-require': [
                'error',
                {
                    allowModules: [
                        '@typescript-eslint/eslint-plugin',
                        '@typescript-eslint/parser',
                    ],
                },
            ],
            '@typescript-eslint/no-unused-vars': 'warn',
            // to enforce using type for object type definitions, can be type or interface
            '@typescript-eslint/consistent-type-definitions': [
                'error',
                'interface',
            ],
            'typescriptEslintPlugin/return-await': 'error',
        },
    },
]
